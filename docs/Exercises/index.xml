<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://ctatis1.github.io/showcase/docs/Exercises/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ctatis1.github.io/showcase/docs/Exercises/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/ColorModels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/ColorModels/</guid><description>Exercise Color Models # Exercise 1
Research other color models such as HSL, HSB, XYZ. What is a colour model? # Computers understand binary language i.e. 0s and 1s. Colours are also 0s and 1s inside a computer. But while designing anything digital you do not tell the computer that hey, I want to use 01011101 colour. Obviously, we do not use the binary code. Here we use a colour model to specify a colour in terms of some parameters which in turn will send the 0’s and 1’s to the display and tell it what colour has to be shown for each desired pixel.</description></item><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/TerrainVisualizationApp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/TerrainVisualizationApp/</guid><description>Exercise Color Models # Exercise 2
Develop a terrain visualization application. Check out the 3D terrain generation with Perlin noise coding train tutorial. Code # Terrain Visualization Application # Terrain Visualization Application /* Source code https://github.com/CodingTrain/website-archive/blob/main/CodingChallenges/CC_011_PerlinNoiseTerrain/Processing/CC_011_PerlinNoiseTerrain/CC_011_PerlinNoiseTerrain.pde SpeedSlider added in order to view it faster or slower StrokeBtn added in order to view the stroke lines */ var cols, rows; var scl = 20; var w = 1000; var h = 1000; var flying = 0; let speedSlider; let strokeBtn; var terrain = []; function setup() { createCanvas(600, 400, WEBGL); cols = w / scl; rows = h / scl; for (var x = 0; x &amp;lt; cols; x++) { terrain[x] = []; for (var y = 0; y &amp;lt; rows; y++) { terrain[x][y] = 0; } } speedSlider = createSlider(0, 0.</description></item></channel></rss>