<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://ctatis1.github.io/showcase/docs/Exercises/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ctatis1.github.io/showcase/docs/Exercises/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/ColorBlend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/ColorBlend/</guid><description>Excercise Color Blend # Exercise 1
Implement other blending modes. Introduction # What is a blending mode? # Blending Modes are mathematical equations that blend layers based on their hue, saturation, luminosity, or a combination of these components.
You can use Blending Modes to apply overlays, textures, or target adjustments to specific areas of your image without creating layer masks.
Blending Modes are an excellent way to create nondestructive effects.</description></item><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/ColorModels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/ColorModels/</guid><description>Exercise Color Models # Exercise 1
Research other color models such as HSL, HSB, XYZ. Background Information # What is a colour model? # Computers understand binary language i.e. 0s and 1s. Colours are also 0s and 1s inside a computer. But while designing anything digital you do not tell the computer that hey, I want to use 01011101 colour. Obviously, we do not use the binary code. Here we use a colour model to specify a colour in terms of some parameters which in turn will send the 0’s and 1’s to the display and tell it what colour has to be shown for each desired pixel.</description></item><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/ImageProcessing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/ImageProcessing/</guid><description>Exercise Image Processing # Exercise 5
Exercise Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask.Hint: circular regions around the mouse pointer are handy and quite simple to implement by means of glsl distance. A magnifier tool. Requires a bit of research. For instance, look for it in shadertoy. Integrate luma and other coloring brightness tools.</description></item><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/Photomosaic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/Photomosaic/</guid><description>Exercise Photomosaic # Exercise 4
Implement a mosaic visual application. Background Information # Photomosaic # A photomosaic is a photo composed of a collection of images arranged in such a way as to present a larger image. This larger image consists of a two-dimensional array or matrix of other smaller images, which when viewed from close up you can see each of the photos and when viewed from a distance all of the small composite images form a photo.</description></item><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/TerrainVisualizationApp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/TerrainVisualizationApp/</guid><description>Exercise Color Models # Exercise 2
Develop a terrain visualization application. Check out the 3D terrain generation with Perlin noise coding train tutorial. Background Information # What is Perlin Noise? # Perlin noise is a method of generating sets of random structured numbers. While a normal random number generator will produce outputs that are completely independent from each other — excellent if you’re trying to generate a password or shuffle a deck, there are lots of instances where you want some coherence in the randomness.</description></item><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/Texturing/</guid><description>Texturing # Implement other coloring brightness tools such as HSV value V, HSL lightness L or Component average. Introduction # This exercise seeks to generate different textures through the manipulation of each one of the pixels of the image using shaders. In this way, it seeks to generate the following textures
LUMA # Luma represents the brightness in an image (the &amp;ldquo;black-and-white&amp;rdquo; or achromatic portion of the image). Luma is typically paired with chrominance.</description></item><item><title/><link>https://ctatis1.github.io/showcase/docs/Exercises/VisualMasking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ctatis1.github.io/showcase/docs/Exercises/VisualMasking/</guid><description>Exercise Moiré Patterns and Kinegrams # Exercise 3
Implement a kinegram and some moiré patterns which are close related visual phenomena to masking. Introduction # Moiré Pattern # &amp;ldquo;‘ Moiré ’ is a French word meaning a silk fabric that has been subjected to heat and pressure rollers after weaving to give it a rippled appearance.
The “Moiré Pattern” is an interference pattern produced by placing the similar templates , slightly offset by spacing or angle.</description></item></channel></rss>